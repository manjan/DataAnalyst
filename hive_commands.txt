CREATE EXTERNAL TABLE employees
(emp_id STRING,
 fname STRING,
 lname STRING,
 address STRING,
 city STRING,
 state STRING,
 zipcode STRING,
 job_title STRING,
 email STRING,
 active STRING,
 salary STRING)
 ROW FORMAT DELIMITED
 FIELDS TERMINATED BY '\t'
 LOCATION '/dualcore/employees';



ALTER TABLE suppliers CHANGE company name STRING;

ALTER TABLE suppliers RENAME TO vendors;


CREATE TABLE ads
(
  cust_id int,
  fname string,
  lname string,
  address string,
  city string,
  state string,
  zipcode string
)
PARTITIONED BY (network TINYINT)
ROW FORMAT DELIMITED
FIELDS TERMINATED BY '\t';

ALTER TABLE ads ADD PARTITION(network=1);
ALTER TABLE ads ADD PARTITION(network=2);

LOAD DATA INPATH '/dualcore/ad_data1/part-m-00000'
INTO TABLE ads
PARTITION(network=1);

LOAD DATA INPATH '/dualcore/ad_data2/part-r-00000'
INTO TABLE ads
PARTITION(network=2);

SELECT COUNT(*) from ads where network=1;
SELECT COUNT(*) from ads where network=2;

Relational Analysis

Select COUNT(*) as totals,prod_id
from order_details
GROUP BY prod_id
ORDER BY totals DESC
LIMIT 5;

Select SUM(p.price) as totals,o.order_id as orderid
from order_details o, products p
WHERE o.prod_id = p.prod_id
GROUP BY orderid
ORDER BY totals DESC
LIMIT 5;

Relational Analysis
1.
INVALIDATE METADATA;
SELECT p.name,COUNT(*) as count
from orders p, order_details o
WHERE (p.prod_id = o.prod_id)
GROUP BY p.name
ORDER BY count DESC
LIMIT 3;


2.
INVALIDATE METADATA;
SELECT o.order_id,SUM(p.cost) as total
from products p, order_details o
WHERE (p.prod_id = o.prod_id)
GROUP BY o.order_id
ORDER BY total DESC
LIMIT 3;

3.
INVALIDATE METADATA;
SELECT TO_DATE(od.order_date) as dater, SUM(p.price) as revenue,SUM(p.price - p.cost) as profit
from products p, order_details o, orders od
WHERE (p.prod_id = o.prod_id and o.order_id = od.order_id)
GROUP BY dater
ORDER BY dater;


BONUS:
INVALIDATE METADATA;
SELECT dater, revenue, profit,
RANK() OVER 
(PARTITION BY YEAR(dater),MONTH(dater) ORDER BY profit DESC) as ranks
from 
(SELECT TO_DATE(od.order_date) as dater, SUM(p.price) as revenue,SUM(p.price - p.cost) as profit from products p, order_details o, orders od
WHERE (p.prod_id = o.prod_id and o.order_id = od.order_id)
GROUP BY dater
) ads
ORDER BY dater;



#Hands-On Exercise: Analyzing Text andComplex Data With Hive

Step #1: Create, Load and Query a Table with Complex Data
CREATE EXTERNAL TABLE loyalty_program
(
  cust_id STRING,
  fname STRING,
  lname STRING,
  email STRING,
  level STRING,
  phone MAP<STRING,STRING>,
  order_ids ARRAY<INT>,
  order_value STRUCT<min:INT,max:INT,avg:INT,total:INT>
  )
 ROW FORMAT DELIMITED
 FIELDS TERMINATED BY '|'
 COLLECTION ITEMS TERMINATED BY ','
 MAP KEYS TERMINATED BY ':'
 LOCATION '/dualcore/loyalty_program';
 
 hdfs dfs -put /home/training/training_materials/analyst/data/loyalty_data.txt /dualcore/loyalty_program/

SELECT phone['HOME'] as homephone from loyalty_program where cust_id=1200866;

SELECT order_ids[2] as order_id from loyalty_program where cust_id=1200866;

SELECT order_value.total as total from loyalty_program where cust_id=1200866;



Step #2: Create and Populate the Web Logs Table

-- The following is an example of what a line from a Web server log file looks like
-- 
-- 10.21.147.9 - - [31/May/2013:00:00:04 -0800] "GET /tablet.html HTTP/1.1" 200 9652 "http://www.google.com/search?q=tablet" "ACME Browser 1.0" "SESSIONID=280493516274"


CREATE EXTERNAL TABLE web_logs (
  ip_address STRING,
  date_string STRING,
  request STRING,
  status STRING,
  bytes STRING,
  referer STRING,
  user_agent STRING,
  cookie STRING
)
ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.RegexSerDe'
WITH SERDEPROPERTIES (
   "input.regex" = "^([\\d.]+) \\S+ \\S+ \\[(.+?)\\] \\\"(.+?)\\\" (\\d{3}) (\\d+) \\\"(.+?)\\\" \\\"(.+?)\\\" \\\"SESSIONID=(\\d+)\\\"\\s*"
)
LOCATION '/dualcore/web_logs';

hcat -f $ADIR/exercises/complex_data/create_web_logs.hql

hdfs dfs -put $ADIR/data/access.log /dualcore/web_logs/

SELECT term, COUNT(term) AS num FROM
(SELECT LOWER(REGEXP_EXTRACT(request,
'/search\\?phrase=(\\S+)', 1)) AS term
FROM web_logs
WHERE request REGEXP '/search\\?phrase=') terms
GROUP BY term
ORDER BY num DESC
LIMIT 3;

Bonus Exercise #1: Analyze Numeric Product Ratings

#find the product with the highest average among all those with at least 50 ratings:
SELECT prod_id, FORMAT_NUMBER(avg_rating, 2) AS avg_rating
 FROM (SELECT prod_id, AVG(rating) AS avg_rating,
                           COUNT(*) AS num
                           FROM ratings
                           GROUP BY prod_id) rated
WHERE num >=50
ORDER BY avg_rating DESC
LIMIT 1;
